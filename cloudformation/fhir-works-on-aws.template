{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(SO0128) - v4.0.0 - Solution - Primary Template - This template creates all the necessary resources to deploy FHIR Works on AWS; a framework to deploy a FHIR server on AWS.\n",
  "Resources": {
    "FhirServerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-fhirServer",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "DdbToEsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-ddbToEs",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "StartExportJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-startExportJob",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "StopExportJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-stopExportJob",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "GetJobStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-getJobStatus",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "UpdateStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fhir-service-dev-updateStatus",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "FhirServerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "src/index.default",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-fhirServer",
        "MemorySize": 512,
        "Timeout": 40,
        "Description": "FHIR API Server",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "EXPORT_STATE_MACHINE_ARN": {
              "Ref": "BulkExportStateMachine"
            },
            "PATIENT_COMPARTMENT_V3": "patientCompartmentSearchParams.3.0.2.json",
            "PATIENT_COMPARTMENT_V4": "patientCompartmentSearchParams.4.0.1.json"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "FhirServerLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FhirServerLogGroup",
        "FhirServerLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for FhirServerLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "DdbToEsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "ddbToEsLambda/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-ddbToEs",
        "MemorySize": 512,
        "Timeout": 300,
        "Description": "Write DDB changes from `resource` table to ElasticSearch service",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "ENABLE_ES_HARD_DELETE": "false"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "DdbToEsLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DdbToEsLogGroup",
        "DdbToEsLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for DdbToEsLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "StartExportJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "bulkExport/index.startExportJobHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-startExportJob",
        "MemorySize": 192,
        "Timeout": 30,
        "Description": "Start the Glue job for bulk export",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "GLUE_JOB_NAME": {
              "Ref": "ExportGlueJob"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GlueJobRelatedLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StartExportJobLogGroup",
        "GlueJobRelatedLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for StartExportJobLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "StopExportJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "bulkExport/index.stopExportJobHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-stopExportJob",
        "MemorySize": 192,
        "Timeout": 30,
        "Description": "Stop the Glue job for bulk export",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "GLUE_JOB_NAME": {
              "Ref": "ExportGlueJob"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GlueJobRelatedLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StopExportJobLogGroup",
        "GlueJobRelatedLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for StopExportJobLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "GetJobStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "bulkExport/index.getJobStatusHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-getJobStatus",
        "MemorySize": 192,
        "Timeout": 30,
        "Description": "Get the status of a Glue job run for bulk export",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "GLUE_JOB_NAME": {
              "Ref": "ExportGlueJob"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GlueJobRelatedLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetJobStatusLogGroup",
        "GlueJobRelatedLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for GetJobStatusLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "UpdateStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "bulkExport/index.updateStatusStatusHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-updateStatus",
        "MemorySize": 192,
        "Timeout": 30,
        "Description": "Update the status of a bulk export job",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "UpdateStatusLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateStatusLogGroup",
        "UpdateStatusLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for UpdateStatusLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "UploadGlueScriptsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/fhir-service.zip"
        },
        "Handler": "bulkExport/uploadGlueScriptsToS3.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "fhir-service-dev-uploadGlueScripts",
        "MemorySize": 192,
        "Timeout": 30,
        "Description": "Upload glue scripts to s3",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "API_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  {
                    "Fn::Sub": ".execute-api.${AWS::Region}.amazonaws.com/"
                  },
                  {
                    "Ref": "Stage"
                  }
                ]
              ]
            },
            "S3_KMS_KEY": {
              "Ref": "S3KMSKey"
            },
            "RESOURCE_TABLE": "resource-db-dev",
            "EXPORT_REQUEST_TABLE": "export-request-dev",
            "EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX": "jobStatus-index",
            "FHIR_BINARY_BUCKET": {
              "Ref": "FHIRBinaryBucket"
            },
            "ELASTICSEARCH_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ElasticSearchDomain",
                      "DomainEndpoint"
                    ]
                  }
                ]
              ]
            },
            "OAUTH2_DOMAIN_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "UserPoolDomain"
                  },
                  {
                    "Fn::Sub": ".auth.${AWS::Region}.amazoncognito.com/oauth2"
                  }
                ]
              ]
            },
            "EXPORT_RESULTS_BUCKET": {
              "Ref": "BulkExportResultsBucket"
            },
            "EXPORT_RESULTS_SIGNER_ROLE_ARN": {
              "Fn::GetAtt": [
                "ExportResultsSignerRole",
                "Arn"
              ]
            },
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0",
            "VALIDATOR_LAMBDA_ALIAS": {
              "Fn::If": [
                "isUsingHapiValidator",
                {
                  "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ENABLE_MULTI_TENANCY": {
              "Ref": "EnableMultiTenancy"
            },
            "LOG_LEVEL": "error",
            "GLUE_SCRIPTS_BUCKET": {
              "Ref": "GlueScriptsBucket"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "UploadGlueScriptsLambdaRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadGlueScriptsLambdaRole"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for UploadGlueScriptsLambdaFunction. We are controlling access to the lambda using IAM roles"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since we want to allow this function to scale up"
            }
          ]
        }
      }
    },
    "FhirServerLambdaVersionVcpca8Ndf3AlT1RZ0Vlh7Y4snT763aRnPI2XHD2o04": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FhirServerLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "FHIR API Server"
      }
    },
    "FhirServerProvConcLambdaAlias": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionName": {
          "Ref": "FhirServerLambdaFunction"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "FhirServerLambdaVersionVcpca8Ndf3AlT1RZ0Vlh7Y4snT763aRnPI2XHD2o04",
            "Version"
          ]
        },
        "Name": "provisioned",
        "ProvisionedConcurrencyConfig": {
          "ProvisionedConcurrentExecutions": 5
        }
      },
      "DependsOn": "FhirServerLambdaFunction"
    },
    "DdbToEsLambdaVersionpyUQoP2Azs2dpmGb6ay8NNVXzubXPa6LI4ER5OzMxhk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DdbToEsLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Write DDB changes from `resource` table to ElasticSearch service"
      }
    },
    "StartExportJobLambdaVersionX5QHbljSU6bg45xtryHE3TYHtw0Hap3dbVNVNFUecz4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartExportJobLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Start the Glue job for bulk export"
      }
    },
    "StopExportJobLambdaVersioncQ7C3HcPhSZ6nRtzj0yPRrTPQuumiaGIqViMWsmIEIE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StopExportJobLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Stop the Glue job for bulk export"
      }
    },
    "GetJobStatusLambdaVersionLpasSU33a9RJWvWYrErb8k3RmfF4L1u4zuMn5mi6I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetJobStatusLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Get the status of a Glue job run for bulk export"
      }
    },
    "UpdateStatusLambdaVersionKpMEriRWptH2APq3naK359rWgkJZyvEZKjiEj8tQY4s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateStatusLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Update the status of a bulk export job"
      }
    },
    "UploadGlueScriptsLambdaVersionFg2IojL4mCxm4AOPvobStdylDDf2WsNzOydoAA9mAs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadGlueScriptsLambdaFunction"
        },
        "CodeSha256": "uNRRfC06yUkUFFQg/o9rxTF8E3c38vgBBjreFxHPOP0=",
        "Description": "Upload glue scripts to s3"
      }
    },
    "BulkExportStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "states.us-west-2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-us-west-2-fhir-service-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UpdateStatusLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UpdateStatusLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "StartExportJobLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "StartExportJobLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GetJobStatusLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "GetJobStatusLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "StopExportJobLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "StopExportJobLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "BulkExportStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"Comment\": \"State machine that executes a FHIR bulk export job\",\n  \"StartAt\": \"parallelHelper\",\n  \"States\": {\n    \"catchAllUpdateStatusToFailed\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${aa4695978c272b5ced15939e12d5d141}\",\n      \"Parameters\": {\n        \"jobId.$\": \"$.jobId\",\n        \"status\": \"failed\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ]\n        }\n      ],\n      \"End\": true\n    },\n    \"parallelHelper\": {\n      \"Type\": \"Parallel\",\n      \"End\": true,\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"catchAllUpdateStatusToFailed\"\n        }\n      ],\n      \"Branches\": [\n        {\n          \"StartAt\": \"startExportJob\",\n          \"States\": {\n            \"updateStatusToFailed\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${aa4695978c272b5ced15939e12d5d141}\",\n              \"Parameters\": {\n                \"globalParams.$\": \"$\",\n                \"status\": \"failed\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"End\": true\n            },\n            \"updateStatusToCanceled\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${aa4695978c272b5ced15939e12d5d141}\",\n              \"Parameters\": {\n                \"globalParams.$\": \"$\",\n                \"status\": \"canceled\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"End\": true\n            },\n            \"updateStatusToCompleted\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${aa4695978c272b5ced15939e12d5d141}\",\n              \"Parameters\": {\n                \"globalParams.$\": \"$\",\n                \"status\": \"completed\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"End\": true\n            },\n            \"startExportJob\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${bc92a824e91efbf644fa01e48d0c0e2e}\",\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"Next\": \"waitForExportJob\"\n            },\n            \"waitForExportJob\": {\n              \"Type\": \"Wait\",\n              \"Seconds\": 10,\n              \"Next\": \"getJobStatus\"\n            },\n            \"getJobStatus\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${3de42af21211f8e13478993084efd06b}\",\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"Next\": \"choiceOnJobStatus\"\n            },\n            \"choiceOnJobStatus\": {\n              \"Type\": \"Choice\",\n              \"Choices\": [\n                {\n                  \"Variable\": \"$.executionParameters.isCanceled\",\n                  \"BooleanEquals\": true,\n                  \"Next\": \"stopExportJob\"\n                },\n                {\n                  \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                  \"StringEquals\": \"SUCCEEDED\",\n                  \"Next\": \"updateStatusToCompleted\"\n                },\n                {\n                  \"Or\": [\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"STARTING\"\n                    },\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"RUNNING\"\n                    }\n                  ],\n                  \"Next\": \"waitForExportJob\"\n                },\n                {\n                  \"Or\": [\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"FAILED\"\n                    },\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"TIMEOUT\"\n                    },\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"STOPPING\"\n                    },\n                    {\n                      \"Variable\": \"$.executionParameters.glueJobRunStatus\",\n                      \"StringEquals\": \"STOPPED\"\n                    }\n                  ],\n                  \"Next\": \"updateStatusToFailed\"\n                }\n              ]\n            },\n            \"stopExportJob\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${1f557922bd8ea1055de8a761d3221026}\",\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ]\n                }\n              ],\n              \"Next\": \"updateStatusToCanceled\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
            {
              "aa4695978c272b5ced15939e12d5d141": {
                "Fn::GetAtt": [
                  "UpdateStatusLambdaFunction",
                  "Arn"
                ]
              },
              "bc92a824e91efbf644fa01e48d0c0e2e": {
                "Fn::GetAtt": [
                  "StartExportJobLambdaFunction",
                  "Arn"
                ]
              },
              "3de42af21211f8e13478993084efd06b": {
                "Fn::GetAtt": [
                  "GetJobStatusLambdaFunction",
                  "Arn"
                ]
              },
              "1f557922bd8ea1055de8a761d3221026": {
                "Fn::GetAtt": [
                  "StopExportJobLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "BulkExportStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "BulkExportStateMachineRole"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-fhir-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTenant": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tenant",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTenantTenantidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTenant"
        },
        "PathPart": "{tenantId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTenantTenantidVarMetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTenantTenantidVar"
        },
        "PathPart": "metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "ApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FhirServerLambdaFunction",
                    "Arn"
                  ]
                },
                ":",
                "provisioned",
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "ApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FhirServerLambdaFunction",
                    "Arn"
                  ]
                },
                ":",
                "provisioned",
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodMetadataGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FhirServerLambdaFunction",
                    "Arn"
                  ]
                },
                ":",
                "provisioned",
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "FHIR specification allows for no auth on /metadata"
            }
          ]
        }
      }
    },
    "ApiGatewayMethodTenantTenantidVarMetadataGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTenantTenantidVarMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FhirServerLambdaFunction",
                    "Arn"
                  ]
                },
                ":",
                "provisioned",
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "FHIR specification allows for no auth on /tenant/{tenantId}/metadata"
            }
          ]
        }
      }
    },
    "ApiGatewayDeployment1637096455060": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "ApiGatewayMethodAny",
        "ApiGatewayMethodProxyVarAny",
        "ApiGatewayMethodMetadataGet",
        "ApiGatewayMethodTenantTenantidVarMetadataGet"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W68",
              "reason": "Usage plan is associated with stage name dev"
            },
            {
              "id": "W45",
              "reason": "Updated via custom resource after resource creation"
            }
          ]
        }
      }
    },
    "ApiGatewayApiKey1": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "developer-key-dev",
        "Description": "Key for developer to access the FHIR Api",
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          }
        ]
      },
      "DependsOn": [
        "ApiGatewayDeployment1637096455060",
        "Dev"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "API key name must be known before sls package is run"
            }
          ]
        }
      }
    },
    "ApiGatewayUsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": [
        "ApiGatewayDeployment1637096455060",
        "Dev"
      ],
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan for fhir-service dev stage",
        "UsagePlanName": "fhir-service-dev",
        "Throttle": {
          "BurstLimit": 100,
          "RateLimit": 50
        }
      }
    },
    "ApiGatewayUsagePlanKey1": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {
          "Ref": "ApiGatewayApiKey1"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "ApiGatewayUsagePlan"
        }
      }
    },
    "FhirServerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::Join": [
            ":",
            [
              {
                "Fn::GetAtt": [
                  "FhirServerLambdaFunction",
                  "Arn"
                ]
              },
              "provisioned"
            ]
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": "FhirServerProvConcLambdaAlias"
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/fhir-service-dev",
        "RetentionInDays": 90,
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "fhir-service",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*"
                  }
                }
              ]
            }
          }
        ],
        "PermissionsBoundary": {
          "Ref": "ServerlessLogsBoundary"
        }
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "fhir-works-on-aws/v4.0.0/custom-resources.zip"
        },
        "FunctionName": "fhir-service-dev-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "CUSTOM_USER_AGENT": "AwsSolution/SO0128/v4.0.0"
          }
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "We do not want a VPC for CustomDashresourceDashapigwDashcwDashroleLambdaFunction. This lambda is used during deployment to set up infra"
            },
            {
              "id": "W92",
              "reason": "We do not want to define ReservedConcurrentExecutions since this function is used during deployment to set up infra"
            }
          ]
        }
      }
    },
    "DdbToEsEventSourceMappingDynamodbResourceDynamoDBTableV2": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "DdbToEsLambdaRole"
      ],
      "Properties": {
        "BatchSize": 15,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ResourceDynamoDBTableV2",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "DdbToEsLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST",
        "Enabled": true,
        "MaximumRetryAttempts": 3,
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::GetAtt": [
                "DdbToEsDLQ",
                "Arn"
              ]
            }
          }
        }
      }
    },
    "ResourceDynamoDBTableV2": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to set the table explicit name"
            }
          ]
        }
      },
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Properties": {
        "TableName": "resource-db-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "vid",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "vid",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Ref": "DynamodbKMSKey"
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "Tags": {
          "Fn::If": [
            "isNotDev",
            [
              {
                "Key": "backup",
                "Value": "daily"
              },
              {
                "Key": "service",
                "Value": "fhir"
              }
            ],
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "ExportRequestDynamoDBTable": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to set the table explicit name"
            },
            {
              "id": "W78",
              "reason": "Backup not explicitly needed"
            }
          ]
        }
      },
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "export-request-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "jobId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "jobStatus",
            "AttributeType": "S"
          },
          {
            "AttributeName": "jobOwnerId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "jobId",
            "KeyType": "HASH"
          }
        ],
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Ref": "DynamodbKMSKey"
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "jobStatus-index",
            "KeySchema": [
              {
                "AttributeName": "jobStatus",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "jobOwnerId",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            }
          }
        ],
        "Tags": {
          "Fn::If": [
            "isNotDev",
            [
              {
                "Key": "service",
                "Value": "fhir"
              }
            ],
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain"
    },
    "ApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "Name": "Authorizer",
        "ProviderARNs": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/"
                },
                {
                  "Ref": "UserPool"
                }
              ]
            ]
          }
        ]
      }
    },
    "FHIRBinaryBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Properties": {
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "FHIRLogsBucket"
          },
          "LogFilePrefix": "binary-acl"
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "aws:kms",
                "KMSMasterKeyID": {
                  "Ref": "S3KMSKey"
                }
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "FHIRLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "This is the logs bucket"
            },
            {
              "id": "W35",
              "reason": "This is the logs bucket"
            }
          ]
        }
      },
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "aws:kms",
                "KMSMasterKeyID": {
                  "Ref": "S3KMSKey"
                }
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "FHIRBinaryBucketHttpsOnlyPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "FHIRBinaryBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowSSLRequestsOnly",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FHIRBinaryBucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FHIRBinaryBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "FHIRLogsBucketHttpsOnlyPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "FHIRLogsBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowSSLRequestsOnly",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FHIRLogsBucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FHIRLogsBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "FhirServerLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "* only applies to X-Ray statement which does not define a group or sampling-rule"
            },
            {
              "id": "W76",
              "reason": "SPCM higher than 25 is justified"
            }
          ]
        }
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "FhirServerLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:*:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Describe*",
                    "kms:Get*",
                    "kms:List*",
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "S3KMSKey",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DynamodbKMSKey",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ElasticSearchKMSKey",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ResourceDynamoDBTableV2",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ExportRequestDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "ExportRequestDynamoDBTable",
                              "Arn"
                            ]
                          },
                          "/index/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "es:ESHttpGet",
                    "es:ESHttpHead",
                    "es:ESHttpPost"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "ElasticSearchDomain",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*Object",
                    "s3:ListBucket",
                    "s3:DeleteObjectVersion"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FHIRBinaryBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "FHIRBinaryBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "BulkExportResultsBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "BulkExportResultsBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ExportResultsSignerRole",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": [
                    {
                      "Ref": "BulkExportStateMachine"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "isUsingHapiValidator",
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": [
                        {
                          "Fn::ImportValue": "fhir-service-validator-lambda-dev"
                        }
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DdbToEsLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "* only applies to X-Ray statement which does not define a group or sampling-rule"
            }
          ]
        }
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DdbToEsLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:*:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams",
                    "dynamodb:GetRecords"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ResourceDynamoDBTableV2",
                        "StreamArn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "ElasticSearchDomain",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DdbToEsDLQ",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "KMSPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Describe*",
                    "kms:Get*",
                    "kms:List*",
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamodbKMSKey",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ElasticSearchKMSKey",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DdbToEsDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600,
        "KmsMasterKeyId": "alias/aws/sqs"
      }
    },
    "DdbToEsDLQHttpsOnlyPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Deny",
              "Action": [
                "SQS:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DdbToEsDLQ",
                    "Arn"
                  ]
                }
              ],
              "Principal": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "DdbToEsDLQ"
          }
        ]
      }
    },
    "ServerlessLogsBoundary": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allows serverless to manage CloudWatch publishing",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:GET",
                "apigateway:PATCH"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}::/account"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:CreateRole",
                "iam:AttachRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:PassRole"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/serverlessApiGatewayCloudWatchRole"
              },
              "Condition": {
                "ArnEqualsIfExists": {
                  "iam:PolicyARN": "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                }
              }
            }
          ]
        }
      }
    },
    "DDBToESErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reaon": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when the Stream errors is more than 1 unit for 15 minutes out of the past 25 minutes. Streams do have retry logic",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "DDBToESLambdaErrorAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "Errors",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DdbToEsLambdaFunction"
            }
          }
        ],
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
        "Unit": "Count"
      }
    },
    "DDBToESIteratorAgeAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm if the oldest record in the batch when processed was older than 1 minute.",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "DDBToESIteratorAgeAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "MetricName": "IteratorAge",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DdbToEsLambdaFunction"
            }
          }
        ],
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 60,
        "TreatMissingData": "notBreaching",
        "Unit": "Seconds"
      }
    },
    "DdbToEsDLQDepthAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm if queue depth increases to >= 1 messages",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "DDBToESDLQDepthAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "DdbToEsDLQ",
                "QueueName"
              ]
            }
          }
        ],
        "Namespace": "AWS/SQS",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
        "Unit": "Count"
      }
    },
    "FhirLambdaErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when Fhir errors is more than 1",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "FhirLambdaErrorAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "FhirServerLambdaFunction"
            }
          }
        ],
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
        "Unit": "Count"
      }
    },
    "FhirLambdaLatencyAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when Fhir average latency is more than 2.5s; 2 times",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirLambdaLatencyAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 2,
        "MetricName": "Duration",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "FhirServerLambdaFunction"
            }
          }
        ],
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 2500,
        "TreatMissingData": "notBreaching",
        "Unit": "Milliseconds"
      }
    },
    "ApiGateway5XXErrorAlarm": {
      "DependsOn": [
        "ApiGatewayRestApi"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when Api GW has more than 1 5xx errors; 3 times",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "ApiGateway5XXErrorAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "5XXError",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Stage"
                  },
                  "fhir-service"
                ]
              ]
            }
          }
        ],
        "Namespace": "AWS/ApiGateway",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
        "Unit": "Count"
      }
    },
    "ApiGateway4XXErrorAlarm": {
      "DependsOn": [
        "ApiGatewayRestApi"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when Api GW has more than 1 4xx errors; 3 times",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "ApiGateway4XXErrorAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "4XXError",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Stage"
                  },
                  "fhir-service"
                ]
              ]
            }
          }
        ],
        "Namespace": "AWS/ApiGateway",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
        "Unit": "Count"
      }
    },
    "ApiGatewayLatencyAlarm": {
      "DependsOn": [
        "ApiGatewayRestApi"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmDescription": "Alarm when Api GW average latency is more than 3s; 2 times",
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "ApiGatewayLatencyAlarm"
            ]
          ]
        },
        "ActionsEnabled": false,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 2,
        "MetricName": "Latency",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Stage"
                  },
                  "fhir-service"
                ]
              ]
            }
          }
        ],
        "Namespace": "AWS/ApiGateway",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 3000,
        "TreatMissingData": "notBreaching",
        "Unit": "Milliseconds"
      }
    },
    "ClusterStatusRedAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "FhirESClusterStatusRedAlarm"
            ]
          ]
        },
        "AlarmDescription": "Primary and replica shards of at least one index are not allocated to nodes in a cluster.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "ClusterStatus.red",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "ClusterStatusYellowAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isNotDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterStatusYellowAlarm"
            ]
          ]
        },
        "AlarmDescription": "Replica shards for at least one index are not allocated to 2 nodes in a cluster.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "ClusterStatus.yellow",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "ClusterCPUUtilizationTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "FhirESClusterCPUUtilAlarm"
            ]
          ]
        },
        "AlarmDescription": "Average CPU utilization over last 10 minutes too high.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ES",
        "Period": 600,
        "Statistic": "Average",
        "Threshold": 80
      }
    },
    "ClusterMasterCPUUtilizationTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isNotDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterMasterCPUUtilAlarm"
            ]
          ]
        },
        "AlarmDescription": "Average CPU utilization over last 10 minutes too high.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "MasterCPUUtilization",
        "Namespace": "AWS/ES",
        "Period": 600,
        "Statistic": "Average",
        "Threshold": 50
      }
    },
    "ClusterFreeStorageSpaceTooLowAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterFreeStorageSpaceTooLowAlarm"
            ]
          ]
        },
        "AlarmDescription": "Cluster is running out of storage space.",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "FreeStorageSpace",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Minimum",
        "Threshold": {
          "Fn::If": [
            "isDev",
            2500,
            22500
          ]
        }
      }
    },
    "ClusterIndexWritesBlockedTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterIndexWritesBlockedTooHighAlarm"
            ]
          ]
        },
        "AlarmDescription": "Cluster is blocking incoming write requests.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ClusterIndexWritesBlocked",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "ClusterJVMMemoryPressureTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterJVMMemoryAlarm"
            ]
          ]
        },
        "AlarmDescription": "Average JVM memory pressure over last 10 minutes too high.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "JVMMemoryPressure",
        "Namespace": "AWS/ES",
        "Period": 600,
        "Statistic": "Average",
        "Threshold": 80
      }
    },
    "ClusterMasterJVMMemoryPressureTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isNotDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterMasterJVMMemoryAlarm"
            ]
          ]
        },
        "AlarmDescription": "Average JVM memory pressure over last 10 minutes too high.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "MasterJVMMemoryPressure",
        "Namespace": "AWS/ES",
        "Period": 600,
        "Statistic": "Average",
        "Threshold": 80
      }
    },
    "ClusterMasterNotReachableFromNodeAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isNotDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterMasterNotReachableFromNodeAlarm"
            ]
          ]
        },
        "AlarmDescription": "Master node stopped or not reachable. Usually the result of a network connectivity issue or AWS dependency problem.",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 5,
        "MetricName": "MasterReachableFromNode",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Minimum",
        "Threshold": 1
      }
    },
    "ClusterAutomatedSnapshotFailureTooHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isNotDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterSnapshotFailureAlarm"
            ]
          ]
        },
        "AlarmDescription": "No automated snapshot was taken for the domain in the previous 36 hours.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "AutomatedSnapshotFailure",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "ClusterKibanaHealthyNodesTooLowAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Condition": "isDev",
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "Low",
              "FhirESClusterKibanaAlarm"
            ]
          ]
        },
        "AlarmDescription": "Kibana is inaccessible.",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 5,
        "DatapointsToAlarm": 3,
        "MetricName": "KibanaHealthyNodes",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Minimum",
        "Threshold": 1
      }
    },
    "ClusterKMSKeyErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "FhirESClusterKMSErrorAlarm"
            ]
          ]
        },
        "AlarmDescription": "KMS customer master key used to encrypt data at rest has been disabled.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "KMSKeyError",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "ClusterKMSKeyInaccessibleAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "We want to explicitly create an alarm name"
            }
          ]
        }
      },
      "Properties": {
        "AlarmName": {
          "Fn::Join": [
            ".",
            [
              "FhirSolution",
              {
                "Ref": "Stage"
              },
              "High",
              "FhirESClusterKMSInaccessibleAlarm"
            ]
          ]
        },
        "AlarmDescription": "KMS customer master key used to encrypt data at rest has been deleted or revoked its grants to Amazon ES.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ClientId",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          },
          {
            "Name": "DomainName",
            "Value": {
              "Ref": "ElasticSearchDomain"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "KMSKeyInaccessible",
        "Namespace": "AWS/ES",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 0
      }
    },
    "S3Alias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "-",
            [
              "alias/s3Key",
              {
                "Ref": "Stage"
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "S3KMSKey"
        }
      }
    },
    "S3KMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "EnableKeyRotation": true,
        "Description": "KMS CMK for s3",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Enable IAM Root Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "DynamodbAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "-",
            [
              "alias/dynamoKey",
              {
                "Ref": "Stage"
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "DynamodbKMSKey"
        }
      }
    },
    "DynamodbKMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "EnableKeyRotation": true,
        "Description": "KMS CMK for DynamoDB",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Enable IAM Root Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "ElasticSearchAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "-",
            [
              "alias/elasticKey",
              {
                "Ref": "Stage"
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "ElasticSearchKMSKey"
        }
      }
    },
    "ElasticSearchKMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "EnableKeyRotation": true,
        "Description": "KMS CMK for Elastic Search",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Enable IAM Root Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "LogAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "-",
            [
              "alias/logKey",
              {
                "Ref": "Stage"
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "LogKMSKey"
        }
      }
    },
    "LogKMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "EnableKeyRotation": true,
        "Description": "KMS CMK for Cloudwatch Logs",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Enable IAM Root Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow Cloudwatch to use this Key policy",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*"
              ],
              "Resource": "*",
              "Condition": {
                "ArnLike": {
                  "kms:EncryptionContext:aws:logs:arn": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "KibanaUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Condition": "isDev",
      "Properties": {
        "AutoVerifiedAttributes": [
          "email"
        ],
        "UserPoolName": {
          "Fn::Sub": "${AWS::StackName}-Kibana"
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "Name": "email",
            "Required": true
          },
          {
            "AttributeDataType": "String",
            "Name": "cc_confirmed"
          }
        ]
      }
    },
    "KibanaUserPoolDomain": {
      "Type": "AWS::Cognito::UserPoolDomain",
      "Condition": "isDev",
      "Properties": {
        "UserPoolId": {
          "Ref": "KibanaUserPool"
        },
        "Domain": {
          "Fn::Join": [
            "-",
            [
              "kibana",
              {
                "Ref": "Stage"
              },
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        }
      }
    },
    "KibanaUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Condition": "isDev",
      "Properties": {
        "ClientName": {
          "Fn::Sub": "${AWS::StackName}-KibanaClient"
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "KibanaUserPool"
        },
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH",
          "USER_PASSWORD_AUTH"
        ],
        "PreventUserExistenceErrors": "ENABLED"
      }
    },
    "KibanaIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Condition": "isDev",
      "Properties": {
        "IdentityPoolName": {
          "Fn::Sub": "${AWS::StackName}-KibanaIDPool"
        },
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "KibanaUserPoolClient"
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "KibanaUserPool",
                "ProviderName"
              ]
            }
          }
        ]
      }
    },
    "KibanaCognitoRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "isDev",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonESCognitoAccess"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "AdminKibanaAccessRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "isDev",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "KibanaIdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        }
      }
    },
    "IdentityPoolRoleAttachment": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Condition": "isDev",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "KibanaIdentityPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "AdminKibanaAccessRole",
              "Arn"
            ]
          }
        }
      }
    },
    "SearchLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "${AWS::StackName}-search-logs"
        },
        "KmsKeyId": {
          "Fn::GetAtt": [
            "LogKMSKey",
            "Arn"
          ]
        },
        "RetentionInDays": 3653
      }
    },
    "SearchLogResourcePolicy": {
      "Type": "AWS::Logs::ResourcePolicy",
      "DependsOn": [
        "SearchLogs"
      ],
      "Properties": {
        "PolicyDocument": {
          "Fn::Sub": "{ \"Version\": \"2012-10-17\", \"Statement\": [{ \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"es.amazonaws.com\"}, \"Action\":[ \"logs:PutLogEvents\",\"logs:CreateLogStream\"],\"Resource\": \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-search-logs:*\"}]}"
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}-search-logs-resource-policy"
        }
      }
    },
    "ElasticSearchDomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "DependsOn": [
        "SearchLogResourcePolicy"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W90",
              "reason": "We do not want a VPC for ElasticSearch. We are controlling access to ES using IAM roles"
            }
          ]
        }
      },
      "Properties": {
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeType": "gp2",
          "VolumeSize": {
            "Fn::If": [
              "isDev",
              10,
              73
            ]
          }
        },
        "ElasticsearchClusterConfig": {
          "InstanceType": {
            "Fn::If": [
              "isDev",
              "t3.small.elasticsearch",
              "m5.large.elasticsearch"
            ]
          },
          "InstanceCount": {
            "Fn::If": [
              "isDev",
              1,
              4
            ]
          },
          "DedicatedMasterEnabled": {
            "Fn::If": [
              "isDev",
              false,
              true
            ]
          },
          "DedicatedMasterCount": {
            "Fn::If": [
              "isDev",
              {
                "Ref": "AWS::NoValue"
              },
              3
            ]
          },
          "DedicatedMasterType": {
            "Fn::If": [
              "isDev",
              {
                "Ref": "AWS::NoValue"
              },
              "c5.large.elasticsearch"
            ]
          },
          "ZoneAwarenessEnabled": {
            "Fn::If": [
              "isDev",
              false,
              true
            ]
          }
        },
        "ElasticsearchVersion": "7.4",
        "EncryptionAtRestOptions": {
          "Enabled": true,
          "KmsKeyId": {
            "Ref": "ElasticSearchKMSKey"
          }
        },
        "NodeToNodeEncryptionOptions": {
          "Enabled": true
        },
        "SnapshotOptions": {
          "Fn::If": [
            "isDev",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "AutomatedSnapshotStartHour": 0
            }
          ]
        },
        "CognitoOptions": {
          "Fn::If": [
            "isDev",
            {
              "Enabled": true,
              "IdentityPoolId": {
                "Ref": "KibanaIdentityPool"
              },
              "UserPoolId": {
                "Ref": "KibanaUserPool"
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "KibanaCognitoRole",
                  "Arn"
                ]
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "AccessPolicies": {
          "Fn::If": [
            "isDev",
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      {
                        "Fn::GetAtt": [
                          "AdminKibanaAccessRole",
                          "Arn"
                        ]
                      }
                    ]
                  },
                  "Action": "es:*",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      {
                        "Fn::Join": [
                          "/",
                          [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role"
                            },
                            {
                              "Ref": "KibanaCognitoRole"
                            },
                            "CognitoIdentityCredentials"
                          ]
                        ]
                      }
                    ]
                  },
                  "Action": "es:*",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*"
                  }
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "LogPublishingOptions": {
          "ES_APPLICATION_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-search-logs:*"
            },
            "Enabled": true
          },
          "SEARCH_SLOW_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-search-logs:*"
            },
            "Enabled": true
          },
          "INDEX_SLOW_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-search-logs:*"
            },
            "Enabled": true
          }
        }
      }
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true
        },
        "AutoVerifiedAttributes": [
          "email"
        ],
        "UserPoolName": {
          "Ref": "AWS::StackName"
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "Name": "email",
            "Required": true
          },
          {
            "AttributeDataType": "String",
            "Name": "cc_confirmed"
          },
          {
            "AttributeDataType": "String",
            "Name": "tenantId"
          }
        ]
      }
    },
    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
          "implicit"
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "email",
          "openid",
          "profile"
        ],
        "ClientName": {
          "Fn::Sub": "${AWS::StackName}-UserPool"
        },
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "CallbackURLs": [
          {
            "Ref": "CognitoOAuthDefaultRedirectURL"
          }
        ],
        "DefaultRedirectURI": {
          "Ref": "CognitoOAuthDefaultRedirectURL"
        },
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "SupportedIdentityProviders": [
          "COGNITO"
        ],
        "PreventUserExistenceErrors": "ENABLED"
      }
    },
    "UserPoolDomain": {
      "Type": "AWS::Cognito::UserPoolDomain",
      "Properties": {
        "Domain": {
          "Ref": "UserPoolClient"
        },
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "PractitionerUserGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "This is a member of the hospital staff, who directly helps patients",
        "GroupName": "practitioner",
        "Precedence": 0,
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "NonPractitionerUserGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "This is a member of the hospital staff who needs access to non-medical record",
        "GroupName": "non-practitioner",
        "Precedence": 1,
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "AuditorUserGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Someone who needs read, v_read and search access on patients",
        "GroupName": "auditor",
        "Precedence": 2,
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "GlueJobRelatedLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "For the glue actions the Resources statement must be *, to further lock down the access you can use IAM Tags & Conditionals"
            }
          ]
        }
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "glueAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "glue:StartJobRun",
                    "glue:GetJobRun",
                    "glue:BatchStopJobRun"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:GetItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ExportRequestDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamodbKMSKey",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GlueScriptsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "FHIRLogsBucket"
          },
          "LogFilePrefix": "GlueScriptsBucket"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "GlueScriptsBucketHttpsOnlyPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "GlueScriptsBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowSSLRequestsOnly",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "GlueScriptsBucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "GlueScriptsBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "BulkExportResultsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "ExpirationRule",
              "Status": "Enabled",
              "ExpirationInDays": "3"
            }
          ]
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "FHIRLogsBucket"
          },
          "LogFilePrefix": "BulkExportResultsBucket"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "BulkExportResultsBucketHttpsOnlyPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BulkExportResultsBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowSSLRequestsOnly",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BulkExportResultsBucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BulkExportResultsBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GlueJobRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ],
        "Policies": [
          {
            "PolicyName": "ddbAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Scan"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ResourceDynamoDBTableV2",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamodbKMSKey",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "s3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "BulkExportResultsBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "GlueScriptsBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "GlueJobSecurityConfiguration": {
      "Type": "AWS::Glue::SecurityConfiguration",
      "Properties": {
        "EncryptionConfiguration": {
          "CloudWatchEncryption": {
            "KmsKeyArn": {
              "Fn::GetAtt": [
                "LogKMSKey",
                "Arn"
              ]
            },
            "CloudWatchEncryptionMode": "SSE-KMS"
          },
          "S3Encryptions": [
            {
              "KmsKeyArn": {
                "Fn::GetAtt": [
                  "LogKMSKey",
                  "Arn"
                ]
              },
              "S3EncryptionMode": "SSE-KMS"
            }
          ],
          "JobBookmarksEncryption": {
            "KmsKeyArn": {
              "Fn::GetAtt": [
                "LogKMSKey",
                "Arn"
              ]
            },
            "JobBookmarksEncryptionMode": "CSE-KMS"
          }
        },
        "Name": "bulk-export-security-config"
      },
      "DependsOn": [
        "LogKMSKey"
      ]
    },
    "ExportGlueJob": {
      "Type": "AWS::Glue::Job",
      "DependsOn": [
        "UploadGlueScriptsCustomResource"
      ],
      "Properties": {
        "Role": {
          "Fn::GetAtt": [
            "GlueJobRole",
            "Arn"
          ]
        },
        "GlueVersion": "2.0",
        "WorkerType": {
          "Ref": "ExportGlueWorkerType"
        },
        "NumberOfWorkers": {
          "Ref": "ExportGlueNumberWorkers"
        },
        "SecurityConfiguration": {
          "Ref": "GlueJobSecurityConfiguration"
        },
        "Command": {
          "ScriptLocation": {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  "Ref": "GlueScriptsBucket"
                },
                "/export-script.py"
              ]
            ]
          },
          "Name": "glueetl",
          "PythonVersion": "3"
        },
        "ExecutionProperty": {
          "MaxConcurrentRuns": {
            "Fn::If": [
              "isMultiTenancyEnabled",
              30,
              2
            ]
          }
        },
        "DefaultArguments": {
          "--TempDir": {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  "Ref": "BulkExportResultsBucket"
                },
                "/temp"
              ]
            ]
          },
          "--ddbTableName": "resource-db-dev",
          "--workerType": {
            "Ref": "ExportGlueWorkerType"
          },
          "--numberWorkers": {
            "Ref": "ExportGlueNumberWorkers"
          },
          "--s3OutputBucket": {
            "Ref": "BulkExportResultsBucket"
          },
          "--s3ScriptBucket": {
            "Ref": "GlueScriptsBucket"
          },
          "--enable-metrics": "true",
          "--enable-continuous-cloudwatch-log": "true",
          "--enable-continuous-log-filter": "true"
        }
      }
    },
    "ExportResultsSignerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "s3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "BulkExportResultsBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "UpdateStatusLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "ddbAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ExportRequestDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamodbKMSKey",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UploadGlueScriptsCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UploadGlueScriptsLambdaFunction",
            "Arn"
          ]
        },
        "RandomValue": "1637096455060"
      }
    },
    "UploadGlueScriptsLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "s3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "GlueScriptsBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "Dev": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "dev",
        "Description": "dev Stage",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "DeploymentId": {
          "Ref": "ApiGatewayDeployment1637096455060"
        },
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiGatewayLogGroup",
              "Arn"
            ]
          },
          "Format": "{\"authorizer.claims.sub\":\"$context.authorizer.claims.sub\",\"error.message\":\"$context.error.message\",\"extendedRequestId\":\"$context.extendedRequestId\",\"httpMethod\":\"$context.httpMethod\",\"identity.sourceIp\":\"$context.identity.sourceIp\",\"integration.error\":\"$context.integration.error\",\"integration.integrationStatus\":\"$context.integration.integrationStatus\",\"integration.latency\":\"$context.integration.latency\",\"integration.requestId\":\"$context.integration.requestId\",\"integration.status\":\"$context.integration.status\",\"path\":\"$context.path\",\"requestId\":\"$context.requestId\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"stage\":\"$context.stage\",\"status\":\"$context.status\"}"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W64",
              "reason": "Usage plan is associated with stage name dev"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Fn::Join": [
          "-",
          [
            {
              "Fn::FindInMap": [
                "SourceCode",
                "General",
                "S3Bucket"
              ]
            },
            {
              "Ref": "AWS::Region"
            }
          ]
        ]
      }
    },
    "FhirServerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FhirServerLambdaVersionVcpca8Ndf3AlT1RZ0Vlh7Y4snT763aRnPI2XHD2o04"
      }
    },
    "DdbToEsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DdbToEsLambdaVersionpyUQoP2Azs2dpmGb6ay8NNVXzubXPa6LI4ER5OzMxhk"
      }
    },
    "StartExportJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartExportJobLambdaVersionX5QHbljSU6bg45xtryHE3TYHtw0Hap3dbVNVNFUecz4"
      }
    },
    "StopExportJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StopExportJobLambdaVersioncQ7C3HcPhSZ6nRtzj0yPRrTPQuumiaGIqViMWsmIEIE"
      }
    },
    "GetJobStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetJobStatusLambdaVersionLpasSU33a9RJWvWYrErb8k3RmfF4L1u4zuMn5mi6I"
      }
    },
    "UpdateStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateStatusLambdaVersionKpMEriRWptH2APq3naK359rWgkJZyvEZKjiEj8tQY4s"
      }
    },
    "UploadGlueScriptsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadGlueScriptsLambdaVersionFg2IojL4mCxm4AOPvobStdylDDf2WsNzOydoAA9mAs"
      }
    },
    "BulkExportStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "BulkExportStateMachine"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "UserPoolId": {
      "Description": "User pool id for the provisioning users.",
      "Value": {
        "Ref": "UserPool"
      }
    },
    "UserPoolAppClientId": {
      "Description": "App client id for the provisioning users.",
      "Value": {
        "Ref": "UserPoolClient"
      }
    },
    "FHIRBinaryBucket": {
      "Description": "S3 Bucket for storing Binary Objects",
      "Value": {
        "Ref": "FHIRBinaryBucket"
      }
    },
    "ResourceDynamoDBTableV2Arn": {
      "Description": "DynamoDB table for storing non-Binary resources",
      "Value": {
        "Fn::GetAtt": [
          "ResourceDynamoDBTableV2",
          "Arn"
        ]
      }
    },
    "ResourceDynamoDBTableV2StreamArn": {
      "Description": "DynamoDB stream for the DDB table storing non-Binary resources",
      "Value": {
        "Fn::GetAtt": [
          "ResourceDynamoDBTableV2",
          "StreamArn"
        ]
      }
    },
    "ExportRequestDynamoDBTableArn": {
      "Description": "DynamoDB table for storing bulk export requests",
      "Value": {
        "Fn::GetAtt": [
          "ExportRequestDynamoDBTable",
          "Arn"
        ]
      }
    },
    "ElasticSearchDomainEndpoint": {
      "Description": "Endpoint of ElasticSearch instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ElasticSearchDomain",
                "DomainEndpoint"
              ]
            }
          ]
        ]
      }
    },
    "ElasticSearchDomainKibanaEndpoint": {
      "Condition": "isDev",
      "Description": "ElasticSearch Kibana endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ElasticSearchDomain",
                "DomainEndpoint"
              ]
            },
            "/_plugin/kibana"
          ]
        ]
      }
    },
    "ElasticSearchKibanaUserPoolId": {
      "Condition": "isDev",
      "Description": "User pool id for the provisioning ES Kibana users.",
      "Value": {
        "Ref": "KibanaUserPool"
      }
    },
    "ElasticSearchKibanaUserPoolAppClientId": {
      "Condition": "isDev",
      "Description": "App client id for the provisioning ES Kibana users.",
      "Value": {
        "Ref": "KibanaUserPoolClient"
      }
    },
    "CloudwatchExecutionLogGroup": {
      "Description": "Cloudwatch Execution log group for storing request/responses for auditing purposes",
      "Value": {
        "Fn::Join": [
          "",
          [
            "API-Gateway-Execution-Logs_",
            {
              "Ref": "ApiGatewayRestApi"
            },
            "/",
            {
              "Ref": "Stage"
            }
          ]
        ]
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            "-",
            [
              "CloudwatchExecutionLogGroup",
              {
                "Ref": "Stage"
              }
            ]
          ]
        }
      }
    },
    "CloudwatchExecutionLogGroupArn": {
      "Description": "Arn of Cloudwatch Execution log group for storing request/responses for auditing purposes",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Execution-Logs_"
            },
            {
              "Ref": "ApiGatewayRestApi"
            },
            "/",
            {
              "Ref": "Stage"
            },
            ":log-stream:*"
          ]
        ]
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            "-",
            [
              "CloudwatchExecutionLogGroup",
              {
                "Ref": "Stage"
              },
              "Arn"
            ]
          ]
        }
      }
    },
    "ValidatorLambdaAlias": {
      "Condition": "isUsingHapiValidator",
      "Description": "Arn of Hapi Validator lambda",
      "Value": {
        "Fn::ImportValue": "fhir-service-validator-lambda-dev"
      }
    }
  },
  "Parameters": {
    "Stage": {
      "Type": "String",
      "Default": "dev",
      "Description": "Stage must be \"dev\"",
      "ConstraintDescription": "Must be \"dev\"",
      "AllowedValues": [
        "dev"
      ]
    },
    "CognitoOAuthDefaultRedirectURL": {
      "Type": "String",
      "Default": "http://localhost",
      "Description": "Cognito's default OAuth redirect URL used for User Pool. Default: http://localhost"
    },
    "ExportGlueWorkerType": {
      "Type": "String",
      "Default": "G.2X",
      "AllowedValues": [
        "G.2X",
        "G.1X"
      ],
      "Description": "Select the Glue worker type to run Export jobs. Default is 'G.2X'"
    },
    "ExportGlueNumberWorkers": {
      "Type": "Number",
      "Default": 5,
      "Description": "Number of Glue workers to use during an Export job."
    },
    "EnableMultiTenancy": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "whether or not to enable multi-tenancy"
    },
    "logLevel": {
      "Type": "String",
      "Default": "error",
      "AllowedValues": [
        "debug",
        "info",
        "warn",
        "error"
      ]
    }
  },
  "Conditions": {
    "isDev": {
      "Fn::Equals": [
        {
          "Ref": "Stage"
        },
        "dev"
      ]
    },
    "isNotDev": {
      "Fn::Not": [
        {
          "Condition": "isDev"
        }
      ]
    },
    "isUsingHapiValidator": {
      "Fn::Equals": [
        "true",
        "false"
      ]
    },
    "isMultiTenancyEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableMultiTenancy"
        },
        "true"
      ]
    }
  },
  "Mappings": {
    "SourceCode": {
      "General": {
        "S3Bucket": "solutions"
      }
    }
  }
}
